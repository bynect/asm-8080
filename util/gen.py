#!/usr/bin/env python3
# -*- coding: utf-8 -*-


import humps
import re


def main():
    comp = re.compile(r"^(0x[\da-f]+)	([\w \,]*)", re.M | re.I)
    match = None

    op_input = "util/opcodes.txt"
    op_output = "src/op.rs"
    dis_output = "src/dis/mod.rs"

    with open(op_input) as f:
        match = comp.findall(f.read())

    header = (
        "//! `{}` is automatically generated by `" + __file__ + "` from `{}`.\n"
        "//! don't modify this file directly, instead run `python3 "
        + __file__
        + "`.\n\n"
    )

    raw_opcode = "RawOpcode"
    wrap_opcode = "Opcode"
    opcode_err = "OpError"

    with open(op_output, "w") as o:
        with open(dis_output, "w") as f2:
            o.write(header.format(op_output, op_input))
            f2.write(header.format(dis_output, op_input))

            f2.write("use super::op::*;\nuse std::fmt;\n\n")
            f2.write("#[derive(Debug, Clone)]\n")
            f2.write(f"pub struct {opcode_err}(usize);\n\n")
            f2.write(f"impl fmt::Display for {opcode_err} {{\n")
            f2.write(
                f"{' ' * 4}fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {{\n"
            )
            f2.write(f"{' ' * 4 * 2}write!(f, \"expected {{}} bytes\", self.0)\n")
            f2.write(f"{' ' * 4}}}\n}}\n\n")

            f2.write(
                f"pub fn disassemble_raw(bin: &[u8]) -> Result<Vec<{raw_opcode}>, {opcode_err}> {{\n"
            )
            f2.write(f"{' ' * 4}let mut ops = Vec::new();\n\n")
            f2.write(f"{' ' * 4}let mut i = 0;\n")
            f2.write(f"{' ' * 4}while i < bin.len() {{\n")
            f2.write(f"{' ' * 4 * 2}ops.push(match bin[i] {{\n")

            o.write("use std::{mem, fmt};\n\n")
            o.write("#[allow(non_camel_case_types)]\n")
            o.write("#[repr(u8)]\n")
            o.write("#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n")
            o.write(f"pub enum {raw_opcode} {{\n")

            for m in match:
                if m[1] != "":
                    op = m[1].replace(" ", "_").replace(",", "_")

                    op2 = op.replace("__D16", "")
                    op2 = op2.replace("_D16", "")
                    op2 = op2.replace("__D8", "")
                    op2 = op2.replace("_D8", "")
                    op2 = op2.replace("_adr", "")

                    o.write(f"{' ' * 4}{op2} = {m[0]},\n")

                    f2.write(f"{' ' * 4 * 3}{m[0]} => {{\n{' ' * 4 * 4}i += ")
                    if op.endswith("D16") or op.endswith("_adr"):
                        f2.write(
                            f"3;\n{' ' * 4 * 4}if i >= bin.len() {{\n{' ' * 4 * 5}return Err(OpError(i - bin.len()));\n"
                        )

                        f2.write(
                            f"{' ' * 4 * 4}}} else {{\n{' ' * 4 * 5}{raw_opcode}::{op2}\n{' ' * 4 * 4}}}\n"
                        )
                        f2.write(f"{' ' * 4 * 3}}}\n")

                    elif op.endswith("D8"):
                        f2.write(
                            f"2;\n{' ' * 4 * 4}if i >= bin.len() {{\n{' ' * 4 * 5}return Err(OpError(i - bin.len()));\n"
                        )

                        f2.write(
                            f"{' ' * 4 * 4}}} else {{\n{' ' * 4 * 5}{raw_opcode}::{op2}\n{' ' * 4 * 4}}}\n"
                        )
                        f2.write(f"{' ' * 4 * 3}}}\n")
                    else:
                        f2.write(
                            f"1;\n{' ' * 4 * 4}{raw_opcode}::{op2}\n{' ' * 4 * 3}}}\n"
                        )

            o.write("}\n\n")
            o.write(f"impl From<u8> for {raw_opcode} {{\n")
            o.write(f"{' ' * 4}fn from(t: u8) -> {raw_opcode} {{\n")
            o.write(f"{' ' * 4 * 2}match t {{\n")
            o.write(
                f"{' ' * 4 * 3}0x08 | 0x10 | 0x18 | 0x20 | 0x28 | 0x30 | 0x38 | 0xcb | 0xd9 | 0xdd | 0xed | 0xfd => {{\n"
            )
            o.write(
                f"{' ' * 4 * 4}{raw_opcode}::NOP\n{' ' * 4 * 3}}}\n{' ' * 4 * 3}_ => unsafe {{ mem::transmute(t) }},\n"
            )
            o.write(f"{' ' * 4 * 2}}}\n{' ' * 4}}}\n}}\n\n")

            o.write(f"impl From<&u8> for {raw_opcode} {{\n")
            o.write(f"{' ' * 4}fn from(t: &u8) -> {raw_opcode} {{\n")
            o.write(f"{' ' * 4 * 2}From::from(*t)\n")
            o.write(f"{' ' * 4}}}\n}}\n\n")

            o.write(f"impl Into<u8> for {raw_opcode} {{\n")
            o.write(f"{' ' * 4}fn into(self) -> u8 {{\n")
            o.write(f"{' ' * 4 * 2}unsafe {{ mem::transmute(self) }}\n")
            o.write(f"{' ' * 4}}}\n}}\n\n")

            o.write(f"impl fmt::Display for {raw_opcode} {{\n")
            o.write(
                f"{' ' * 4}fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {{\n"
            )
            o.write(
                f"{' ' * 4 * 2}write!(f, \"{{:?}}(0x{{:02x?}})\", self, *self as u8)\n"
            )
            o.write(f"{' ' * 4}}}\n}}\n\n")

            f2.write(f"{' ' * 4 * 3}_ => {{\n{' ' * 4 * 4}i += ")
            f2.write(f"1;\n{' ' * 4 * 4}{raw_opcode}::NOP\n{' ' * 4 * 3}}}\n")

            f2.write(f"{' ' * 4 * 2}}});\n")
            f2.write(f"{' ' * 4}}}\n\n{' ' * 4}Ok(ops)\n}}\n\n")

            o.write("#[derive(Debug, Clone, Copy, PartialEq, Eq)]\n")
            o.write(f"pub enum {wrap_opcode} {{\n")

            f2.write(
                f"pub fn disassemble(bin: &[u8]) -> Result<Vec<{wrap_opcode}>, {opcode_err}> {{\n"
            )
            f2.write(f"{' ' * 4}let mut ops = Vec::new();\n\n")
            f2.write(f"{' ' * 4}let mut i = 0;\n")
            f2.write(f"{' ' * 4}while i < bin.len() {{\n")
            f2.write(f"{' ' * 4 * 2}ops.push(match bin[i] {{\n")

            for m in match:
                if m[1] != "":
                    op = m[1].replace(" ", "_").replace(",", "_").lower()
                    op = humps.pascalize(op)

                    op = op.replace("__D16", "(u8, u8)")
                    op = op.replace("_D16", "(u8, u8)")
                    op = op.replace("__D8", "(u8)")
                    op = op.replace("_D8", "(u8)")
                    op = op.replace("Adr", "(u16)")

                    op = op.replace("_B", "B")
                    op = op.replace("_C", "C")
                    op = op.replace("_D", "D")
                    op = op.replace("_E", "E")
                    op = op.replace("_H", "H")
                    op = op.replace("_L", "L")
                    op = op.replace("_M", "M")
                    op = op.replace("_A", "A")

                    o.write(f"{' ' * 4}{op},\n")

                    op2 = op.replace("(u8, u8)", "(*b1, *b2)")
                    op2 = op2.replace("(u8)", "(*b1)")
                    op2 = op2.replace("(u16)", "(u16::from_le_bytes([*b1, *b2]))")

                    f2.write(f"{' ' * 4 * 3}{m[0]} => {{\n{' ' * 4 * 4}i += ")
                    if op2.endswith("(*b1, *b2)") or op2.endswith(
                        "(u16::from_le_bytes([*b1, *b2]))"
                    ):
                        f2.write(
                            f"3;\n{' ' * 4 * 4}let b1 = bin.get(i - 2).ok_or({opcode_err}(2))?;"
                        )

                        f2.write(
                            f"\n{' ' * 4 * 4}let b2 = bin.get(i - 1).ok_or({opcode_err}(1))?;"
                        )
                        f2.write(
                            f"\n{' ' * 4 * 4}{wrap_opcode}::{op2}\n{' ' * 4 * 3}}}\n"
                        )

                    elif op2.endswith("(*b1)"):
                        f2.write(
                            f"2;\n{' ' * 4 * 4}let b1 = bin.get(i - 1).ok_or({opcode_err}(1))?;"
                        )

                        f2.write(
                            f"\n{' ' * 4 * 4}{wrap_opcode}::{op2}\n{' ' * 4 * 3}}}\n"
                        )

                    else:
                        f2.write(
                            f"1;\n{' ' * 4 * 4}{wrap_opcode}::{op2}\n{' ' * 4 * 3}}}\n"
                        )

            f2.write(f"{' ' * 4 * 3}_ => {{\n{' ' * 4 * 4}i += ")
            f2.write(f"1;\n{' ' * 4 * 4}{wrap_opcode}::Nop\n{' ' * 4 * 3}}}\n")

            f2.write(f"{' ' * 4 * 2}}});\n")
            f2.write(f"{' ' * 4}}}\n\n{' ' * 4}Ok(ops)\n}}\n")

        o.write("}\n")


if __name__ == "__main__":
    main()
