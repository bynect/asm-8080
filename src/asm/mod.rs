//! `src/asm/mod.rs` is automatically generated by `./util/gen.py` from `util/opcodes.txt`.
//! don't modify this file directly, instead run `python3 ./util/gen.py`.

use super::op::*;

pub fn codegen(ops: &[Opcode]) -> Vec<u8> {
    let mut bin = Vec::new();

    let mut i = 0;
    while i < ops.len() {
        match ops[i] {
            Opcode::Nop => {
                bin.push(0x00u8);
            }
            Opcode::LxiB(b2, b1) => {
                bin.push(0x01u8);
                bin.push(b1);
                bin.push(b2);
            }
            Opcode::StaxB => {
                bin.push(0x02u8);
            }
            Opcode::InxB => {
                bin.push(0x03u8);
            }
            Opcode::InrB => {
                bin.push(0x04u8);
            }
            Opcode::DcrB => {
                bin.push(0x05u8);
            }
            Opcode::MviB(b1) => {
                bin.push(0x06u8);
                bin.push(b1);
            }
            Opcode::Rlc => {
                bin.push(0x07u8);
            }
            Opcode::DadB => {
                bin.push(0x09u8);
            }
            Opcode::LdaxB => {
                bin.push(0x0au8);
            }
            Opcode::DcxB => {
                bin.push(0x0bu8);
            }
            Opcode::InrC => {
                bin.push(0x0cu8);
            }
            Opcode::DcrC => {
                bin.push(0x0du8);
            }
            Opcode::MviC(b1) => {
                bin.push(0x0eu8);
                bin.push(b1);
            }
            Opcode::Rrc => {
                bin.push(0x0fu8);
            }
            Opcode::LxiD(b2, b1) => {
                bin.push(0x11u8);
                bin.push(b1);
                bin.push(b2);
            }
            Opcode::StaxD => {
                bin.push(0x12u8);
            }
            Opcode::InxD => {
                bin.push(0x13u8);
            }
            Opcode::InrD => {
                bin.push(0x14u8);
            }
            Opcode::DcrD => {
                bin.push(0x15u8);
            }
            Opcode::MviD(b1) => {
                bin.push(0x16u8);
                bin.push(b1);
            }
            Opcode::Ral => {
                bin.push(0x17u8);
            }
            Opcode::DadD => {
                bin.push(0x19u8);
            }
            Opcode::LdaxD => {
                bin.push(0x1au8);
            }
            Opcode::DcxD => {
                bin.push(0x1bu8);
            }
            Opcode::InrE => {
                bin.push(0x1cu8);
            }
            Opcode::DcrE => {
                bin.push(0x1du8);
            }
            Opcode::MviE(b1) => {
                bin.push(0x1eu8);
                bin.push(b1);
            }
            Opcode::Rar => {
                bin.push(0x1fu8);
            }
            Opcode::LxiH(b2, b1) => {
                bin.push(0x21u8);
                bin.push(b1);
                bin.push(b2);
            }
            Opcode::Shld(s1) => {
                bin.push(0x22u8);
                let b = s1.to_le_bytes();
                bin.push(b[0]);
                bin.push(b[1]);
            }
            Opcode::InxH => {
                bin.push(0x23u8);
            }
            Opcode::InrH => {
                bin.push(0x24u8);
            }
            Opcode::DcrH => {
                bin.push(0x25u8);
            }
            Opcode::MviH(b1) => {
                bin.push(0x26u8);
                bin.push(b1);
            }
            Opcode::Daa => {
                bin.push(0x27u8);
            }
            Opcode::DadH => {
                bin.push(0x29u8);
            }
            Opcode::Lhld(s1) => {
                bin.push(0x2au8);
                let b = s1.to_le_bytes();
                bin.push(b[0]);
                bin.push(b[1]);
            }
            Opcode::DcxH => {
                bin.push(0x2bu8);
            }
            Opcode::InrL => {
                bin.push(0x2cu8);
            }
            Opcode::DcrL => {
                bin.push(0x2du8);
            }
            Opcode::MviL(b1) => {
                bin.push(0x2eu8);
                bin.push(b1);
            }
            Opcode::Cma => {
                bin.push(0x2fu8);
            }
            Opcode::LxiSpD16 => {
                bin.push(0x31u8);
            }
            Opcode::Sta(s1) => {
                bin.push(0x32u8);
                let b = s1.to_le_bytes();
                bin.push(b[0]);
                bin.push(b[1]);
            }
            Opcode::InxSp => {
                bin.push(0x33u8);
            }
            Opcode::InrM => {
                bin.push(0x34u8);
            }
            Opcode::DcrM => {
                bin.push(0x35u8);
            }
            Opcode::MviM(b1) => {
                bin.push(0x36u8);
                bin.push(b1);
            }
            Opcode::Stc => {
                bin.push(0x37u8);
            }
            Opcode::DadSp => {
                bin.push(0x39u8);
            }
            Opcode::Lda(s1) => {
                bin.push(0x3au8);
                let b = s1.to_le_bytes();
                bin.push(b[0]);
                bin.push(b[1]);
            }
            Opcode::DcxSp => {
                bin.push(0x3bu8);
            }
            Opcode::InrA => {
                bin.push(0x3cu8);
            }
            Opcode::DcrA => {
                bin.push(0x3du8);
            }
            Opcode::MviA(b1) => {
                bin.push(0x3eu8);
                bin.push(b1);
            }
            Opcode::Cmc => {
                bin.push(0x3fu8);
            }
            Opcode::MovBB => {
                bin.push(0x40u8);
            }
            Opcode::MovBC => {
                bin.push(0x41u8);
            }
            Opcode::MovBD => {
                bin.push(0x42u8);
            }
            Opcode::MovBE => {
                bin.push(0x43u8);
            }
            Opcode::MovBH => {
                bin.push(0x44u8);
            }
            Opcode::MovBL => {
                bin.push(0x45u8);
            }
            Opcode::MovBM => {
                bin.push(0x46u8);
            }
            Opcode::MovBA => {
                bin.push(0x47u8);
            }
            Opcode::MovCB => {
                bin.push(0x48u8);
            }
            Opcode::MovCC => {
                bin.push(0x49u8);
            }
            Opcode::MovCD => {
                bin.push(0x4au8);
            }
            Opcode::MovCE => {
                bin.push(0x4bu8);
            }
            Opcode::MovCH => {
                bin.push(0x4cu8);
            }
            Opcode::MovCL => {
                bin.push(0x4du8);
            }
            Opcode::MovCM => {
                bin.push(0x4eu8);
            }
            Opcode::MovCA => {
                bin.push(0x4fu8);
            }
            Opcode::MovDB => {
                bin.push(0x50u8);
            }
            Opcode::MovDC => {
                bin.push(0x51u8);
            }
            Opcode::MovDD => {
                bin.push(0x52u8);
            }
            Opcode::MovDE => {
                bin.push(0x53u8);
            }
            Opcode::MovDH => {
                bin.push(0x54u8);
            }
            Opcode::MovDL => {
                bin.push(0x55u8);
            }
            Opcode::MovDM => {
                bin.push(0x56u8);
            }
            Opcode::MovDA => {
                bin.push(0x57u8);
            }
            Opcode::MovEB => {
                bin.push(0x58u8);
            }
            Opcode::MovEC => {
                bin.push(0x59u8);
            }
            Opcode::MovED => {
                bin.push(0x5au8);
            }
            Opcode::MovEE => {
                bin.push(0x5bu8);
            }
            Opcode::MovEH => {
                bin.push(0x5cu8);
            }
            Opcode::MovEL => {
                bin.push(0x5du8);
            }
            Opcode::MovEM => {
                bin.push(0x5eu8);
            }
            Opcode::MovEA => {
                bin.push(0x5fu8);
            }
            Opcode::MovHB => {
                bin.push(0x60u8);
            }
            Opcode::MovHC => {
                bin.push(0x61u8);
            }
            Opcode::MovHD => {
                bin.push(0x62u8);
            }
            Opcode::MovHE => {
                bin.push(0x63u8);
            }
            Opcode::MovHH => {
                bin.push(0x64u8);
            }
            Opcode::MovHL => {
                bin.push(0x65u8);
            }
            Opcode::MovHM => {
                bin.push(0x66u8);
            }
            Opcode::MovHA => {
                bin.push(0x67u8);
            }
            Opcode::MovLB => {
                bin.push(0x68u8);
            }
            Opcode::MovLC => {
                bin.push(0x69u8);
            }
            Opcode::MovLD => {
                bin.push(0x6au8);
            }
            Opcode::MovLE => {
                bin.push(0x6bu8);
            }
            Opcode::MovLH => {
                bin.push(0x6cu8);
            }
            Opcode::MovLL => {
                bin.push(0x6du8);
            }
            Opcode::MovLM => {
                bin.push(0x6eu8);
            }
            Opcode::MovLA => {
                bin.push(0x6fu8);
            }
            Opcode::MovMB => {
                bin.push(0x70u8);
            }
            Opcode::MovMC => {
                bin.push(0x71u8);
            }
            Opcode::MovMD => {
                bin.push(0x72u8);
            }
            Opcode::MovME => {
                bin.push(0x73u8);
            }
            Opcode::MovMH => {
                bin.push(0x74u8);
            }
            Opcode::MovML => {
                bin.push(0x75u8);
            }
            Opcode::Hlt => {
                bin.push(0x76u8);
            }
            Opcode::MovMA => {
                bin.push(0x77u8);
            }
            Opcode::MovAB => {
                bin.push(0x78u8);
            }
            Opcode::MovAC => {
                bin.push(0x79u8);
            }
            Opcode::MovAD => {
                bin.push(0x7au8);
            }
            Opcode::MovAE => {
                bin.push(0x7bu8);
            }
            Opcode::MovAH => {
                bin.push(0x7cu8);
            }
            Opcode::MovAL => {
                bin.push(0x7du8);
            }
            Opcode::MovAM => {
                bin.push(0x7eu8);
            }
            Opcode::MovAA => {
                bin.push(0x7fu8);
            }
            Opcode::AddB => {
                bin.push(0x80u8);
            }
            Opcode::AddC => {
                bin.push(0x81u8);
            }
            Opcode::AddD => {
                bin.push(0x82u8);
            }
            Opcode::AddE => {
                bin.push(0x83u8);
            }
            Opcode::AddH => {
                bin.push(0x84u8);
            }
            Opcode::AddL => {
                bin.push(0x85u8);
            }
            Opcode::AddM => {
                bin.push(0x86u8);
            }
            Opcode::AddA => {
                bin.push(0x87u8);
            }
            Opcode::AdcB => {
                bin.push(0x88u8);
            }
            Opcode::AdcC => {
                bin.push(0x89u8);
            }
            Opcode::AdcD => {
                bin.push(0x8au8);
            }
            Opcode::AdcE => {
                bin.push(0x8bu8);
            }
            Opcode::AdcH => {
                bin.push(0x8cu8);
            }
            Opcode::AdcL => {
                bin.push(0x8du8);
            }
            Opcode::AdcM => {
                bin.push(0x8eu8);
            }
            Opcode::AdcA => {
                bin.push(0x8fu8);
            }
            Opcode::SubB => {
                bin.push(0x90u8);
            }
            Opcode::SubC => {
                bin.push(0x91u8);
            }
            Opcode::SubD => {
                bin.push(0x92u8);
            }
            Opcode::SubE => {
                bin.push(0x93u8);
            }
            Opcode::SubH => {
                bin.push(0x94u8);
            }
            Opcode::SubL => {
                bin.push(0x95u8);
            }
            Opcode::SubM => {
                bin.push(0x96u8);
            }
            Opcode::SubA => {
                bin.push(0x97u8);
            }
            Opcode::SbbB => {
                bin.push(0x98u8);
            }
            Opcode::SbbC => {
                bin.push(0x99u8);
            }
            Opcode::SbbD => {
                bin.push(0x9au8);
            }
            Opcode::SbbE => {
                bin.push(0x9bu8);
            }
            Opcode::SbbH => {
                bin.push(0x9cu8);
            }
            Opcode::SbbL => {
                bin.push(0x9du8);
            }
            Opcode::SbbM => {
                bin.push(0x9eu8);
            }
            Opcode::SbbA => {
                bin.push(0x9fu8);
            }
            Opcode::AnaB => {
                bin.push(0xa0u8);
            }
            Opcode::AnaC => {
                bin.push(0xa1u8);
            }
            Opcode::AnaD => {
                bin.push(0xa2u8);
            }
            Opcode::AnaE => {
                bin.push(0xa3u8);
            }
            Opcode::AnaH => {
                bin.push(0xa4u8);
            }
            Opcode::AnaL => {
                bin.push(0xa5u8);
            }
            Opcode::AnaM => {
                bin.push(0xa6u8);
            }
            Opcode::AnaA => {
                bin.push(0xa7u8);
            }
            Opcode::XraB => {
                bin.push(0xa8u8);
            }
            Opcode::XraC => {
                bin.push(0xa9u8);
            }
            Opcode::XraD => {
                bin.push(0xaau8);
            }
            Opcode::XraE => {
                bin.push(0xabu8);
            }
            Opcode::XraH => {
                bin.push(0xacu8);
            }
            Opcode::XraL => {
                bin.push(0xadu8);
            }
            Opcode::XraM => {
                bin.push(0xaeu8);
            }
            Opcode::XraA => {
                bin.push(0xafu8);
            }
            Opcode::OraB => {
                bin.push(0xb0u8);
            }
            Opcode::OraC => {
                bin.push(0xb1u8);
            }
            Opcode::OraD => {
                bin.push(0xb2u8);
            }
            Opcode::OraE => {
                bin.push(0xb3u8);
            }
            Opcode::OraH => {
                bin.push(0xb4u8);
            }
            Opcode::OraL => {
                bin.push(0xb5u8);
            }
            Opcode::OraM => {
                bin.push(0xb6u8);
            }
            Opcode::OraA => {
                bin.push(0xb7u8);
            }
            Opcode::CmpB => {
                bin.push(0xb8u8);
            }
            Opcode::CmpC => {
                bin.push(0xb9u8);
            }
            Opcode::CmpD => {
                bin.push(0xbau8);
            }
            Opcode::CmpE => {
                bin.push(0xbbu8);
            }
            Opcode::CmpH => {
                bin.push(0xbcu8);
            }
            Opcode::CmpL => {
                bin.push(0xbdu8);
            }
            Opcode::CmpM => {
                bin.push(0xbeu8);
            }
            Opcode::CmpA => {
                bin.push(0xbfu8);
            }
            Opcode::Rnz => {
                bin.push(0xc0u8);
            }
            Opcode::PopB => {
                bin.push(0xc1u8);
            }
            Opcode::Jnz(s1) => {
                bin.push(0xc2u8);
                let b = s1.to_le_bytes();
                bin.push(b[0]);
                bin.push(b[1]);
            }
            Opcode::Jmp(s1) => {
                bin.push(0xc3u8);
                let b = s1.to_le_bytes();
                bin.push(b[0]);
                bin.push(b[1]);
            }
            Opcode::Cnz(s1) => {
                bin.push(0xc4u8);
                let b = s1.to_le_bytes();
                bin.push(b[0]);
                bin.push(b[1]);
            }
            Opcode::PushB => {
                bin.push(0xc5u8);
            }
            Opcode::AdiD8 => {
                bin.push(0xc6u8);
            }
            Opcode::Rst0 => {
                bin.push(0xc7u8);
            }
            Opcode::Rz => {
                bin.push(0xc8u8);
            }
            Opcode::Ret => {
                bin.push(0xc9u8);
            }
            Opcode::Jz(s1) => {
                bin.push(0xcau8);
                let b = s1.to_le_bytes();
                bin.push(b[0]);
                bin.push(b[1]);
            }
            Opcode::Cz(s1) => {
                bin.push(0xccu8);
                let b = s1.to_le_bytes();
                bin.push(b[0]);
                bin.push(b[1]);
            }
            Opcode::Call(s1) => {
                bin.push(0xcdu8);
                let b = s1.to_le_bytes();
                bin.push(b[0]);
                bin.push(b[1]);
            }
            Opcode::AciD8 => {
                bin.push(0xceu8);
            }
            Opcode::Rst1 => {
                bin.push(0xcfu8);
            }
            Opcode::Rnc => {
                bin.push(0xd0u8);
            }
            Opcode::PopD => {
                bin.push(0xd1u8);
            }
            Opcode::Jnc(s1) => {
                bin.push(0xd2u8);
                let b = s1.to_le_bytes();
                bin.push(b[0]);
                bin.push(b[1]);
            }
            Opcode::OutD8 => {
                bin.push(0xd3u8);
            }
            Opcode::Cnc(s1) => {
                bin.push(0xd4u8);
                let b = s1.to_le_bytes();
                bin.push(b[0]);
                bin.push(b[1]);
            }
            Opcode::PushD => {
                bin.push(0xd5u8);
            }
            Opcode::SuiD8 => {
                bin.push(0xd6u8);
            }
            Opcode::Rst2 => {
                bin.push(0xd7u8);
            }
            Opcode::Rc => {
                bin.push(0xd8u8);
            }
            Opcode::Jc(s1) => {
                bin.push(0xdau8);
                let b = s1.to_le_bytes();
                bin.push(b[0]);
                bin.push(b[1]);
            }
            Opcode::InD8 => {
                bin.push(0xdbu8);
            }
            Opcode::Cc(s1) => {
                bin.push(0xdcu8);
                let b = s1.to_le_bytes();
                bin.push(b[0]);
                bin.push(b[1]);
            }
            Opcode::SbiD8 => {
                bin.push(0xdeu8);
            }
            Opcode::Rst3 => {
                bin.push(0xdfu8);
            }
            Opcode::Rpo => {
                bin.push(0xe0u8);
            }
            Opcode::PopH => {
                bin.push(0xe1u8);
            }
            Opcode::Jpo(s1) => {
                bin.push(0xe2u8);
                let b = s1.to_le_bytes();
                bin.push(b[0]);
                bin.push(b[1]);
            }
            Opcode::Xthl => {
                bin.push(0xe3u8);
            }
            Opcode::Cpo(s1) => {
                bin.push(0xe4u8);
                let b = s1.to_le_bytes();
                bin.push(b[0]);
                bin.push(b[1]);
            }
            Opcode::PushH => {
                bin.push(0xe5u8);
            }
            Opcode::AniD8 => {
                bin.push(0xe6u8);
            }
            Opcode::Rst4 => {
                bin.push(0xe7u8);
            }
            Opcode::Rpe => {
                bin.push(0xe8u8);
            }
            Opcode::Pchl => {
                bin.push(0xe9u8);
            }
            Opcode::Jpe(s1) => {
                bin.push(0xeau8);
                let b = s1.to_le_bytes();
                bin.push(b[0]);
                bin.push(b[1]);
            }
            Opcode::Xchg => {
                bin.push(0xebu8);
            }
            Opcode::Cpe(s1) => {
                bin.push(0xecu8);
                let b = s1.to_le_bytes();
                bin.push(b[0]);
                bin.push(b[1]);
            }
            Opcode::XriD8 => {
                bin.push(0xeeu8);
            }
            Opcode::Rst5 => {
                bin.push(0xefu8);
            }
            Opcode::Rp => {
                bin.push(0xf0u8);
            }
            Opcode::PopPsw => {
                bin.push(0xf1u8);
            }
            Opcode::Jp(s1) => {
                bin.push(0xf2u8);
                let b = s1.to_le_bytes();
                bin.push(b[0]);
                bin.push(b[1]);
            }
            Opcode::Di => {
                bin.push(0xf3u8);
            }
            Opcode::Cp(s1) => {
                bin.push(0xf4u8);
                let b = s1.to_le_bytes();
                bin.push(b[0]);
                bin.push(b[1]);
            }
            Opcode::PushPsw => {
                bin.push(0xf5u8);
            }
            Opcode::OriD8 => {
                bin.push(0xf6u8);
            }
            Opcode::Rst6 => {
                bin.push(0xf7u8);
            }
            Opcode::Rm => {
                bin.push(0xf8u8);
            }
            Opcode::Sphl => {
                bin.push(0xf9u8);
            }
            Opcode::Jm(s1) => {
                bin.push(0xfau8);
                let b = s1.to_le_bytes();
                bin.push(b[0]);
                bin.push(b[1]);
            }
            Opcode::Ei => {
                bin.push(0xfbu8);
            }
            Opcode::Cm(s1) => {
                bin.push(0xfcu8);
                let b = s1.to_le_bytes();
                bin.push(b[0]);
                bin.push(b[1]);
            }
            Opcode::CpiD8 => {
                bin.push(0xfeu8);
            }
            Opcode::Rst7 => {
                bin.push(0xffu8);
            }
        }
        i += 1;
    }

    bin
}
